#ifndef BLUR_H
#define BLUR_H

const float g_gaussCoefs[] = {
    0.0003601676510760705,
    0.001060840220600847,
    0.0022948470429744136,
    0.003645994458290195,
    0.004254384694656203,
    0.003645994458290195,
    0.0022948470429744136,
    0.001060840220600847,
    0.0003601676510760705,
    0.001060840220600847,
    0.0031246059169449496,
    0.006759257906812954,
    0.010738936586576231,
    0.012530893278493584,
    0.010738936586576231,
    0.006759257906812954,
    0.0031246059169449496,
    0.001060840220600847,
    0.0022948470429744136,
    0.006759257906812954,
    0.014621865497676578,
    0.02323084701335704,
    0.02710727103624675,
    0.02323084701335704,
    0.014621865497676578,
    0.006759257906812954,
    0.0022948470429744136,
    0.003645994458290195,
    0.010738936586576231,
    0.02323084701335704,
    0.03690857729772948,
    0.04306734092805848,
    0.03690857729772948,
    0.02323084701335704,
    0.010738936586576231,
    0.003645994458290195,
    0.004254384694656203,
    0.012530893278493584,
    0.02710727103624675,
    0.04306734092805848,
    0.05025378896757755,
    0.04306734092805848,
    0.02710727103624675,
    0.012530893278493584,
    0.004254384694656203,
    0.003645994458290195,
    0.010738936586576231,
    0.02323084701335704,
    0.03690857729772948,
    0.04306734092805848,
    0.03690857729772948,
    0.02323084701335704,
    0.010738936586576231,
    0.003645994458290195,
    0.0022948470429744136,
    0.006759257906812954,
    0.014621865497676578,
    0.02323084701335704,
    0.02710727103624675,
    0.02323084701335704,
    0.014621865497676578,
    0.006759257906812954,
    0.0022948470429744136,
    0.001060840220600847,
    0.0031246059169449496,
    0.006759257906812954,
    0.010738936586576231,
    0.012530893278493584,
    0.010738936586576231,
    0.006759257906812954,
    0.0031246059169449496,
    0.001060840220600847,
    0.0003601676510760705,
    0.001060840220600847,
    0.0022948470429744136,
    0.003645994458290195,
    0.004254384694656203,
    0.003645994458290195,
    0.0022948470429744136,
    0.001060840220600847,
    0.0003601676510760705
};

vec3 blur_image(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    vec3 result = vec3(0.0);
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            vec4 texSample = texture(srcImage, coord + (offset / texSize));
            result += coef * texSample.a * texSample.rgb;
            ++coefIndex;
        }
    }

    return result;
}

float blur_image_single(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    float result = 0.0;
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            result += coef * texture(srcImage, coord + (offset / texSize)).r;
            ++coefIndex;
        }
    }

    return result;
}

#endif // BLUR_H
