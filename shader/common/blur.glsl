#ifndef BLUR_H
#define BLUR_H

const float g_gaussCoefs[] = {
    2.3785844843378987e-07,
    4.290839694386399e-06,
    3.3872319578095124e-05,
    0.00011701095591476032,
    0.0001768833916459443,
    0.00011701095591476032,
    3.3872319578095124e-05,
    4.290839694386399e-06,
    2.3785844843378987e-07,
    4.290839694386399e-06,
    7.740446220915683e-05,
    0.0006110386002416437,
    0.002110815308950054,
    0.0031908821534391793,
    0.002110815308950054,
    0.0006110386002416437,
    7.740446220915683e-05,
    4.290839694386399e-06,
    3.3872319578095124e-05,
    0.0006110386002416437,
    0.0048236000913794656,
    0.016662988088003195,
    0.025189144255082306,
    0.016662988088003195,
    0.0048236000913794656,
    0.0006110386002416437,
    3.3872319578095124e-05,
    0.00011701095591476032,
    0.002110815308950054,
    0.016662988088003195,
    0.057561814155603394,
    0.08701517595116307,
    0.057561814155603394,
    0.016662988088003195,
    0.002110815308950054,
    0.00011701095591476032,
    0.0001768833916459443,
    0.0031908821534391793,
    0.025189144255082306,
    0.08701517595116307,
    0.13153930182505902,
    0.08701517595116307,
    0.025189144255082306,
    0.0031908821534391793,
    0.0001768833916459443,
    0.00011701095591476032,
    0.002110815308950054,
    0.016662988088003195,
    0.057561814155603394,
    0.08701517595116307,
    0.057561814155603394,
    0.016662988088003195,
    0.002110815308950054,
    0.00011701095591476032,
    3.3872319578095124e-05,
    0.0006110386002416437,
    0.0048236000913794656,
    0.016662988088003195,
    0.025189144255082306,
    0.016662988088003195,
    0.0048236000913794656,
    0.0006110386002416437,
    3.3872319578095124e-05,
    4.290839694386399e-06,
    7.740446220915683e-05,
    0.0006110386002416437,
    0.002110815308950054,
    0.0031908821534391793,
    0.002110815308950054,
    0.0006110386002416437,
    7.740446220915683e-05,
    4.290839694386399e-06,
    2.3785844843378987e-07,
    4.290839694386399e-06,
    3.3872319578095124e-05,
    0.00011701095591476032,
    0.0001768833916459443,
    0.00011701095591476032,
    3.3872319578095124e-05,
    4.290839694386399e-06,
    2.3785844843378987e-07
};

vec3 blur_image(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    vec3 result = vec3(0.0);
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            vec4 texSample = texture(srcImage, coord + (offset / texSize));
            result += coef * texSample.a * texSample.rgb;
            ++coefIndex;
        }
    }

    return result;
}

float blur_image_single(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    float result = 0.0;
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            result += coef * texture(srcImage, coord + (offset / texSize)).r;
            ++coefIndex;
        }
    }

    return result;
}

#endif // BLUR_H
