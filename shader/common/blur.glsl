#ifndef BLUR_H
#define BLUR_H

const float g_gaussCoefs[] = {
    2.318447968772588e-05,
    0.0001382684881837758,
    0.0004950741580670734,
    0.0010642373177970706,
    0.0013734975597796358,
    0.0010642373177970706,
    0.0004950741580670734,
    0.0001382684881837758,
    2.318447968772588e-05,
    0.0001382684881837758,
    0.0008246109070434878,
    0.0029525422306988297,
    0.006346939287943587,
    0.008191317367168554,
    0.006346939287943587,
    0.0029525422306988297,
    0.0008246109070434878,
    0.0001382684881837758,
    0.0004950741580670734,
    0.0029525422306988297,
    0.010571659372436948,
    0.022725392210155095,
    0.02932923909330057,
    0.022725392210155095,
    0.010571659372436948,
    0.0029525422306988297,
    0.0004950741580670734,
    0.0010642373177970706,
    0.006346939287943587,
    0.022725392210155095,
    0.048851692332414674,
    0.06304766717687244,
    0.048851692332414674,
    0.022725392210155095,
    0.006346939287943587,
    0.0010642373177970706,
    0.0013734975597796358,
    0.008191317367168554,
    0.02932923909330057,
    0.06304766717687244,
    0.08136889730242022,
    0.06304766717687244,
    0.02932923909330057,
    0.008191317367168554,
    0.0013734975597796358,
    0.0010642373177970706,
    0.006346939287943587,
    0.022725392210155095,
    0.048851692332414674,
    0.06304766717687244,
    0.048851692332414674,
    0.022725392210155095,
    0.006346939287943587,
    0.0010642373177970706,
    0.0004950741580670734,
    0.0029525422306988297,
    0.010571659372436948,
    0.022725392210155095,
    0.02932923909330057,
    0.022725392210155095,
    0.010571659372436948,
    0.0029525422306988297,
    0.0004950741580670734,
    0.0001382684881837758,
    0.0008246109070434878,
    0.0029525422306988297,
    0.006346939287943587,
    0.008191317367168554,
    0.006346939287943587,
    0.0029525422306988297,
    0.0008246109070434878,
    0.0001382684881837758,
    2.318447968772588e-05,
    0.0001382684881837758,
    0.0004950741580670734,
    0.0010642373177970706,
    0.0013734975597796358,
    0.0010642373177970706,
    0.0004950741580670734,
    0.0001382684881837758,
    2.318447968772588e-05
};

vec3 blur_image(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    vec3 result = vec3(0.0);
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            vec4 texSample = texture(srcImage, coord + (offset / texSize));
            result += coef * texSample.a * texSample.rgb;
            ++coefIndex;
        }
    }

    return result;
}

float blur_image_single(sampler2D srcImage, vec2 coord) {
    vec2 texSize = vec2(textureSize(srcImage, 0));
    vec2 pixelOffset = vec2(1.0 / float(texSize.x), 1.0 / float(texSize.y));

    float result = 0.0;
    int coefIndex = 0;
    for (int y = -4; y <= 4; ++y) {
        for (int x = -4; x <= 4; ++x) {
            vec2 offset = vec2(x, y);

            float coef = g_gaussCoefs[coefIndex];

            result += coef * texture(srcImage, coord + (offset / texSize)).r;
            ++coefIndex;
        }
    }

    return result;
}

#endif // BLUR_H
